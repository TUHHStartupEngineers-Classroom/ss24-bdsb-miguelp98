[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "Welcome to my online portfolio. I’m Miguel, a passionate Industrial Engineer from the esteemed Politécnica de Madrid, in Spain. Currently, I’m expanding my horizons as an Erasmus student at TUHH, where I’m delving into the dynamic world of Data Science. On this website, you’ll have the opportunity to follow my journey through the Data Science course, as I share my progress and insights step by step. Enjoy your visit!"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Codeknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)\n\nsetwd(\"C:/Users/migue/Desktop/Hamburg/TUHH/ss24-bdsb-miguelp98/01_raw_data\")\n# Cargar librerías necesarias\nlibrary(tidyverse)\nlibrary(vroom)\nlibrary(data.table)\nlibrary(tictoc)\n\n# Definir los tipos de columnas para cada archivo\n\n# assignee.tsv\ncol_types_assignee &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  organization = col_character()\n)\n\n# patent.tsv\ncol_types_patent &lt;- list(\n  id = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  num_claims = col_integer()\n)\n\n# patent_assignee.tsv\ncol_types_patent_assignee &lt;- list(\n  patent_id = col_character(),\n  assignee_id = col_character()\n)\n\n# uspc.tsv\ncol_types_uspc &lt;- list(\n  patent_id = col_character(),\n  mainclass_id = col_character(),\n  sequence = col_integer()\n)\n\n# Importar los datos\n\n# assignee.tsv\nassignee_tbl &lt;- vroom(\n  file       = \"assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types_assignee,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\nsetDT(assignee_tbl)\n\n# patent.tsv\npatent_tbl &lt;- vroom(\n  file       = \"patent.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types_patent,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\nsetDT(patent_tbl)\n\n# patent_assignee.tsv\npatent_assignee_tbl &lt;- vroom(\n  file       = \"patent_assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types_patent_assignee,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\nsetDT(patent_assignee_tbl)\n\n# uspc.tsv\nuspc_tbl &lt;- vroom(\n  file       = \"uspc.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types_uspc,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\nsetDT(uspc_tbl)\n\n# Renombrar columnas para consistencia\nsetnames(patent_assignee_tbl, old = c(\"patent_id\", \"assignee_id\"), new = c(\"id\", \"assignee_id\"))\nsetnames(uspc_tbl, old = \"patent_id\", new = \"id\")\n\n# Combinar los datos paso a paso\ncombined_data &lt;- merge(patent_tbl, patent_assignee_tbl, by = \"id\")\ncombined_data &lt;- merge(combined_data, assignee_tbl, by.x = \"assignee_id\", by.y = \"id\")\ncombined_data &lt;- merge(combined_data, uspc_tbl, by = \"id\")\n\n# Visualizar una muestra de los datos combinados\ncombined_data %&gt;% glimpse()\n\n#&gt; Rows: 802,177\n#&gt; Columns: 8\n#&gt; $ id           &lt;chr&gt; \"8621662\", \"8621663\", \"8621663\", \"8621666\", \"8621666\", \"8…\n#&gt; $ assignee_id  &lt;chr&gt; \"org_aTMUEAbUvQuADfnSfudQ\", \"org_FfZ2sonhh4RvKY8vYp2B\", \"…\n#&gt; $ date         &lt;date&gt; 2014-01-07, 2014-01-07, 2014-01-07, 2014-01-07, 2014-01-…\n#&gt; $ num_claims   &lt;int&gt; 11, 6, 6, 7, 7, 21, 21, 21, 21, 21, 19, 19, 19, 19, 8, 15…\n#&gt; $ type         &lt;chr&gt; \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2…\n#&gt; $ organization &lt;chr&gt; \"Hamilton Sundstrand Space Systems International, Inc.\", …\n#&gt; $ mainclass_id &lt;chr&gt; \"2\", \"2\", \"351\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", …\n#&gt; $ sequence     &lt;int&gt; 0, 0, 1, 0, 1, 0, 1, 3, 2, 4, 0, 2, 1, 3, 0, 0, 2, 3, 1, …\n\nCode# Contar las patentes por organización\npatent_count &lt;- combined_data[, .N, by = organization][order(-N)][1:10]\n\n# Mostrar el resultado\nprint(patent_count)\n\n#&gt;                                    organization     N\n#&gt;                                          &lt;char&gt; &lt;int&gt;\n#&gt;  1: International Business Machines Corporation 19056\n#&gt;  2:               Samsung Electronics Co., Ltd. 14523\n#&gt;  3:                      Canon Kabushiki Kaisha  9467\n#&gt;  4:                            Sony Corporation  8372\n#&gt;  5:                       QUALCOMM Incorporated  7322\n#&gt;  6:                       Microsoft Corporation  7195\n#&gt;  7:                    Kabushiki Kaisha Toshiba  6957\n#&gt;  8:                                 Google Inc.  6082\n#&gt;  9:                         LG Electronics Inc.  5694\n#&gt; 10:                       Panasonic Corporation  5641\n\nCode# Filtrar patentes de agosto de 2014 y contar por organización\naugust_patents &lt;- combined_data[format(date, \"%Y-%m\") == \"2014-08\", .N, by = organization][order(-N)][1:10]\n\n# Mostrar el resultado\nprint(august_patents)\n\n#&gt;                                    organization     N\n#&gt;                                          &lt;char&gt; &lt;int&gt;\n#&gt;  1: International Business Machines Corporation  1810\n#&gt;  2:               Samsung Electronics Co., Ltd.  1223\n#&gt;  3:                       Microsoft Corporation   779\n#&gt;  4:                      Canon Kabushiki Kaisha   772\n#&gt;  5:                            Sony Corporation   596\n#&gt;  6:                       QUALCOMM Incorporated   591\n#&gt;  7:                                 Google Inc.   566\n#&gt;  8:                    Kabushiki Kaisha Toshiba   544\n#&gt;  9:        Hon Hai Precision Industry Co., Ltd.   514\n#&gt; 10:                                  Apple Inc.   501\n\nCode# Filtrar datos y contar las principales clases tecnológicas\ntop_tech_sectors &lt;- combined_data[, .N, by = mainclass_id][order(-N)][1:5]\n\n# Mostrar el resultado\nprint(top_tech_sectors)\n\n#&gt;    mainclass_id     N\n#&gt;          &lt;char&gt; &lt;int&gt;\n#&gt; 1:          257 41500\n#&gt; 2:          455 29419\n#&gt; 3:          370 25628\n#&gt; 4:          438 20372\n#&gt; 5:          709 18345"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Codelibrary(tidyverse)\nlibrary(readxl)\nlibrary(scales)\nlibrary(lubridate)\nlibrary(here)\n\n# Build the relatives routes in the file .qmd\nbikes_path &lt;- here::here(\"01_raw_data\", \"bikes.xlsx\")\norderlines_path &lt;- here::here(\"01_raw_data\", \"orderlines.xlsx\")\nbikeshops_path &lt;- here::here(\"01_raw_data\", \"bikeshops.xlsx\")\n\n# Load the data using the relatives routes\nbikes_tbl &lt;- read_excel(bikes_path)\norderlines_tbl &lt;- read_excel(orderlines_path)\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\nCodebikeshops_tbl &lt;- read_excel(bikeshops_path)\n\n# Join the tables\nbike_orderlines_joined_tbl &lt;- orderlines_tbl %&gt;%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n# Manipulate the data\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_joined_tbl %&gt;%\n  separate(col = category, into = c(\"category.1\", \"category.2\", \"category.3\"), sep = \" - \") %&gt;%\n  mutate(total.price = price * quantity) %&gt;%\n  select(-...1, -gender) %&gt;%\n  select(-ends_with(\".id\")) %&gt;%\n  bind_cols(bike_orderlines_joined_tbl %&gt;% select(order.id)) %&gt;%\n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price, everything()) %&gt;%\n  rename(bikeshop = name) %&gt;%\n  set_names(names(.) %&gt;% str_replace_all(\"\\\\.\", \"_\"))\n\n# Separar ubicación en ciudad y estado\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  separate(col = location, into = c(\"city\", \"state\"), sep = \", \")\n\n# Create table\nsales_by_loc_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  group_by(state) %&gt;%\n  summarize(sales = sum(total_price)) %&gt;%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n# Visualize with ggplot2\nggplot(sales_by_loc_tbl, aes(x = reorder(state, -sales), y = sales)) +\n  geom_col(fill = \"#2DC6D6\") +\n  geom_label(aes(label = sales_text)) +\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by State\",\n    subtitle = \"Total revenue by state\",\n    x = \"State\",\n    y = \"Revenue\"\n  ) + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\nCode# TASK 2: create table location and year\nsales_by_year_loc_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  mutate(year = year(order_date)) %&gt;%\n  group_by(state, year) %&gt;%\n  summarize(sales = sum(total_price), .groups = 'drop') %&gt;%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n# Visualizar ventas por ubicación y año\nsales_by_year_loc_tbl %&gt;%\n  ggplot(aes(x = year, y = sales, fill = state)) +\n  geom_col() +\n  geom_label(aes(label = sales_text)) +\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by Year and State\",\n    subtitle = \"Total revenue by year and state\",\n    x = \"Year\",\n    y = \"Revenue\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  facet_wrap(~ state, scales = \"free_y\")"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Codeknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Your API Key for OpenWeatherMap\napi_key &lt;- \"a256ad6d852c483510ecff0ed3518e2f\"\n\n# The city for which you want to get the weather data\ncity &lt;- \"Madrid\"\n\n# Construct the request URL\nurl &lt;- paste0(\"http://api.openweathermap.org/data/2.5/weather?q=\", city, \"&appid=\", api_key, \"&units=metric\")\n\n# Make the GET request\nresponse &lt;- GET(url)\n\n# Check the status of the response\nif (status_code(response) == 200) {\n  # Parse the content of the response\n  weather_data &lt;- fromJSON(content(response, as = \"text\", encoding = \"UTF-8\"))\n  \n  # Check the structure of the weather_data$weather object\n  str(weather_data$weather)\n  \n  # Extract relevant data\n  main_data &lt;- weather_data$main\n  \n  # weather_data$weather is a list, access the first entry\n  weather_description &lt;- weather_data$weather$description\n  \n  # Create a data frame with the data\n  weather_df &lt;- data.frame(\n    City = city,\n    Temperature = main_data$temp,\n    Pressure = main_data$pressure,\n    Humidity = main_data$humidity,\n    Description = weather_description\n  )\n  \n  # Print the data in a readable format\n  print(weather_df)\n  \n  # Plot the temperature\n  ggplot(weather_df, aes(x = City, y = Temperature, color = Description)) +\n    geom_point(size = 5) +\n    theme_minimal() +\n    labs(title = paste(\"Temperature in\", city),\n         y = \"Temperature (°C)\",\n         x = \"City\")\n  \n} else {\n  print(\"Error in the API request\")\n}\n\n#&gt; 'data.frame':    1 obs. of  4 variables:\n#&gt;  $ id         : int 801\n#&gt;  $ main       : chr \"Clouds\"\n#&gt;  $ description: chr \"few clouds\"\n#&gt;  $ icon       : chr \"02d\"\n#&gt;     City Temperature Pressure Humidity Description\n#&gt; 1 Madrid       17.07     1001       46  few clouds\n\n\n\n\n\n\n\nCode# CHALLENGE 2 ----\n\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ lubridate 1.9.3     ✔ tibble    3.2.1\n#&gt; ✔ purrr     1.0.2     ✔ tidyr     1.3.1\n#&gt; ✔ readr     2.1.5     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter()  masks stats::filter()\n#&gt; ✖ purrr::flatten() masks jsonlite::flatten()\n#&gt; ✖ dplyr::lag()     masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodelibrary(rvest)\n\n#&gt; \n#&gt; Attaching package: 'rvest'\n#&gt; \n#&gt; The following object is masked from 'package:readr':\n#&gt; \n#&gt;     guess_encoding\n\nCodelibrary(xopen)\nlibrary(readr)\nlibrary(scales)\n\n#&gt; \n#&gt; Attaching package: 'scales'\n#&gt; \n#&gt; The following object is masked from 'package:purrr':\n#&gt; \n#&gt;     discard\n#&gt; \n#&gt; The following object is masked from 'package:readr':\n#&gt; \n#&gt;     col_factor\n\nCode# URL de la página principal de Rose Bikes con la correcta codificación para \"Fahrräder\"\nurl_home &lt;- \"https://www.rosebikes.de/fahrr%C3%A4der\"\n#xopen(url_home) # Abre la URL en el navegador para inspección\nhtml_home &lt;- read_html(url_home)\n\n# Obtener las URLs de las categorías de bicicletas\nbike_categories_chr &lt;- html_home |&gt;\n  html_elements(css = \".catalog-navigation__link\") |&gt;\n  html_attr('href') |&gt;\n  str_subset(pattern = \"sale|outlet|gear|customer-service\", negate = T) |&gt;\n  str_c(\"https://www.rosebikes.de\", ... = _)\n\n# Imprimir las URLs de las categorías para verificar\nprint(bike_categories_chr)\n\n#&gt; [1] \"https://www.rosebikes.de/fahrräder/gravel\"           \n#&gt; [2] \"https://www.rosebikes.de/fahrräder/rennrad\"          \n#&gt; [3] \"https://www.rosebikes.de/fahrräder/mtb\"              \n#&gt; [4] \"https://www.rosebikes.de/fahrräder/urban-&-trekking\" \n#&gt; [5] \"https://www.rosebikes.de/fahrräder/e-bike\"           \n#&gt; [6] \"https://www.rosebikes.de/bike-finder\"                \n#&gt; [7] \"https://www.rosebikes.de/bikes-mit-kurzer-lieferzeit\"\n\nCode# Seleccionamos la primera categoría de bicicletas (Gravel)\nbike_category_url &lt;- bike_categories_chr[1]\n\n# Obtener las URLs de los modelos de bicicletas para la categoría seleccionada\nhtml_bike_category &lt;- read_html(bike_category_url)\n\nbike_url_chr &lt;- html_bike_category |&gt;\n  html_elements(css = \".catalog-navigation__list-item+ .catalog-navigation__list-item .catalog-navigation__link\") |&gt;  # no vemos la de Alle\n  html_attr(\"href\") |&gt;\n  str_c(\"https://www.rosebikes.de\", ... = _)\n\n# Imprimir las URLs de los modelos de bicicletas para verificar\nprint(bike_url_chr)\n\n#&gt; [1] \"https://www.rosebikes.de/fahrräder/gravel/adventure\"\n#&gt; [2] \"https://www.rosebikes.de/fahrräder/gravel/everyday\" \n#&gt; [3] \"https://www.rosebikes.de/fahrräder/gravel/race\"     \n#&gt; [4] \"https://www.rosebikes.de/fahrräder/gravel/e-gravel\"\n\nCode# URL de la subcategoría Adventure\nurl_adventure &lt;- bike_url_chr[1]  # Asumimos que \"Adventure\" es la primera subcategoría\n#xopen(url_adventure) # Abre la URL en el navegador para inspección\nhtml_adventure &lt;- read_html(url_adventure)\n\n#Obtener los nombres de los modelos y los precios\nbike_names &lt;- html_adventure |&gt;\n  html_elements(css = \".basic-headline--left .basic-headline__title\") |&gt;\n  html_text() |&gt;\n  str_squish() # Limpiar texto\n\nbike_prices &lt;- html_adventure |&gt;\n  html_elements(css = \".catalog-category-bikes__price-title\") |&gt;\n  html_text() |&gt;\n  str_squish() |&gt;\n  str_remove(\"^ab\")\n\n# Crear un data frame con los nombres y precios\nbike_data &lt;- tibble(\n  Model = bike_names,\n  Price = bike_prices\n)\n\n# Imprimir el data frame\nprint(bike_data)\n\n#&gt; # A tibble: 3 × 2\n#&gt;   Model            Price        \n#&gt;   &lt;chr&gt;            &lt;chr&gt;        \n#&gt; 1 BACKROAD AL      \" 1.999,00 €\"\n#&gt; 2 BACKROAD         \" 2.999,00 €\"\n#&gt; 3 BACKROAD LIMITED \" 4.449,00 €\""
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "CHALLENGE 2"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  }
]