---
title: "Data Acquisition"
author: "Miguel Peñate Arrieta"
format:
  html:
    code-fold: true
    self-contained: false
---

> Data acquisition is the process of converting real-world signals to the digital domain for display, storage, and analysis.

In this section we will work with two concepts <u>API</u> and <u>Scraping</u>.
In the **Task 1** we will work with the API and can get the weather of Madrid. For that, we will use the following link [Open Weather](https://openweathermap.org/).
In the **Task 2** we will scrape the model and prices from the page [Rose Bikes](https://www.rosebikes.de).


### Task 1: Using API to get Madrid's temperature

```{r plot1, fig.width=4, fig.height=2, echo=FALSE, message=FALSE, warning=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(httr)
library(jsonlite)
library(ggplot2)
library(dplyr)

# Your API Key for OpenWeatherMap
api_key <- "a256ad6d852c483510ecff0ed3518e2f"

# The city for which you want to get the weather data
city <- "Madrid"

# Construct the request URL
url <- paste0("http://api.openweathermap.org/data/2.5/weather?q=", city, "&appid=", api_key, "&units=metric")

# Make the GET request
response <- GET(url)

# Check the status of the response
if (status_code(response) == 200) {
  # Parse the content of the response
  weather_data <- fromJSON(content(response, as = "text", encoding = "UTF-8"))
  
  # Extract relevant data
  main_data <- weather_data$main
  weather_description <- weather_data$weather$description
  
  # Create a data frame with the data
  weather_df <- data.frame(
    City = city,
    Temperature = main_data$temp,
    Pressure = main_data$pressure,
    Humidity = main_data$humidity,
    Description = weather_description
  )
  
  # Plot the temperature
  ggplot(weather_df, aes(x = City, y = Temperature, color = Description)) +
    geom_point(size = 5) +
    theme_minimal() +
    labs(title = paste("Temperature in", city),
         y = "Temperature (°C)",
         x = "City")
  
} else {
  print("Error in the API request")
}
```

### Task 2: Scraping to get prices from different bike models

The idea is to print the model and price of the next picture:

![](assets/logo/rose.png){width=90% fig-align="center"}



```{r plot2, fig.width=4, fig.height=2, echo=FALSE, message=FALSE, warning=FALSE}
# CHALLENGE 2 ----

library(tidyverse)
library(rvest)
library(xopen)
library(readr)
library(scales)
library(kableExtra)

# URL de la página principal de Rose Bikes con la correcta codificación para "Fahrräder"
url_home <- "https://www.rosebikes.de/fahrr%C3%A4der"
#xopen(url_home) # Abre la URL en el navegador para inspección
html_home <- read_html(url_home)

# Obtener las URLs de las categorías de bicicletas
bike_categories_chr <- html_home |>
  html_elements(css = ".catalog-navigation__link") |>
  html_attr('href') |>
  str_subset(pattern = "sale|outlet|gear|customer-service", negate = T) |>
  str_c("https://www.rosebikes.de", ... = _)

# Imprimir las URLs de las categorías para verificar
#print(bike_categories_chr)

# Seleccionamos la primera categoría de bicicletas (Gravel)
bike_category_url <- bike_categories_chr[1]

# Obtener las URLs de los modelos de bicicletas para la categoría seleccionada
html_bike_category <- read_html(bike_category_url)

bike_url_chr <- html_bike_category |>
  html_elements(css = ".catalog-navigation__list-item+ .catalog-navigation__list-item .catalog-navigation__link") |>  # no vemos la de Alle
  html_attr("href") |>
  str_c("https://www.rosebikes.de", ... = _)

# Imprimir las URLs de los modelos de bicicletas para verificar
#print(bike_url_chr)

# URL de la subcategoría Adventure
url_adventure <- bike_url_chr[1]  # Asumimos que "Adventure" es la primera subcategoría
#xopen(url_adventure) # Abre la URL en el navegador para inspección
html_adventure <- read_html(url_adventure)

#Obtener los nombres de los modelos y los precios
bike_names <- html_adventure |>
  html_elements(css = ".basic-headline--left .basic-headline__title") |>
  html_text() |>
  str_squish() # Limpiar texto

bike_prices <- html_adventure |>
  html_elements(css = ".catalog-category-bikes__price-title") |>
  html_text() |>
  str_squish() |>
  str_remove("^ab")

# Crear un data frame con los nombres y precios
bike_data <- tibble(
  Model = bike_names,
  Price = bike_prices
)

# Convertir el data frame a una tabla con estilo
kable(bike_data, format = "html", table.attr = "class='table table-striped'") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
```